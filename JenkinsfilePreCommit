#!/usr/bin/env groovy
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.7.0-101'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .toString()
def failedStage = ''
pipeline {
    agent {
        label 'Cloud-Native'
    }
    stages {
        stage('Clean') {
            steps {
                sh("${bob} clean")
            }
        }
        stage('Set working directory/prepare paths') {
            steps {
                script {
                    sh "${bob} set-working-directory"
                    sh "${bob} prepare-cniv-dockerfile-paths"
                }
            }
        }
        stage('Inject Credential Files') {
            steps {
                withCredentials([file(credentialsId: 'lciadm100-docker-auth', variable: 'dockerConfig')]) {
                    sh "install -m 600 ${dockerConfig} ${HOME}/.docker/config.json"
                }
            }
        }
        stage('Checkout Base Image Git Repository') {
            steps {
                script {
                    if (env.GERRIT_CHANGE_NUMBER) {
                        checkout changelog: true, scm: [$class: 'GitSCM', branches: [[name: "$GERRIT_REFSPEC"]],       \
                                doGenerateSubmoduleConfigurations: false,       \
                                extensions: [[$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']]],       \
                                submoduleCfg: [],       \
                                userRemoteConfigs: [[refspec: "${GERRIT_REFSPEC}",       \
                                url: "${GERRIT_MIRROR}/${GERRIT_PROJECT}"]]]
                    } else {
                        println "No GERRIT_CHANGE_NUMBER"
                        git changelog: true, poll: false, url: '${GERRIT_MIRROR}/${REPO}'
                    }
                }
            }
        }
        stage('Prepare Snapshot Build') {
            steps {
                sh "${bob} prepare-snapshot-build"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage('Dockerfile Lint') {
            steps {
                sh "${bob} lint-dockerfile"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }

        stage('Get CBOS newest version') {
            steps {
                script {
                    sh "chmod +x getReleaseVersion.sh"
                    sh "./getReleaseVersion.sh"
                }
            }
        }

        stage('Prepare Paths and Build/Push Base Image') {
            steps {
                sh "${bob} prepare-docker-image-paths"
                sh "${bob} build-and-push-base-image"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage('Build/Push Docker Images') {
            steps {
                parallel(
                        "build-and-push-neo4j": {
                            sh "${bob} build-and-push-images:build-and-push-neo4j"
                        },
                        "build-and-push-neo4j-populator": {
                            sh "${bob} build-and-push-images:build-and-push-neo4j-populator"
                        },
                        "build-and-push-neo4j-load-profiles": {
                            sh "${bob} build-and-push-images:build-and-push-neo4j-load-profiles"
                        },
                        "build-and-push-metric-load-generator": {
                            sh "${bob} build-and-push-images:build-and-push-metric-load-generator"
                        },
                        "build-and-push-load-control-client": {
                            sh "${bob} build-and-push-images:build-and-push-load-control-client"
                        },
                        "build-and-push-load-control-service": {
                            sh "${bob} build-and-push-images:build-and-push-load-control-service"
                        }
                )
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage('Docker Image Design Rule Checks') {
            steps {
                parallel(
                        "check-base": {
                            sh "${bob} image-design-rule-checks-pcr:check-base"
                        },
                        "check-neo4j": {
                            sh "${bob} image-design-rule-checks-pcr:check-neo4j"
                        },
                        "check-neo4j-populator": {
                            sh "${bob} image-design-rule-checks-pcr:check-neo4j-populator"
                        },
                        "check-neo4j-load-profiles": {
                            sh "${bob} image-design-rule-checks-pcr:check-neo4j-load-profiles"
                        },
                        "check-metric-load-generator": {
                            sh "${bob} image-design-rule-checks-pcr:check-metric-load-generator"
                        },
                        "check-load-control-client": {
                            sh "${bob} image-design-rule-checks-pcr:check-load-control-client"
                        },
                        "check-load-control-service": {
                            sh "${bob} image-design-rule-checks-pcr:check-load-control-service"
                        }
                )
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage('Helm Dep Up') {
            steps {
                sh "${bob} helm-dep-up"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }

        stage('Helm Lint') {
            steps {
                sh "${bob} lint-helm"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }

        stage('Build & Push Helm Chart') {
            steps {
                sh "${bob} build-helm"
                sh "${bob} push-helm"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        // **** Enable this section if you wish to run the VA scanners during PCR time **** //
        //stage('Create Trivy Directory') {
        //    steps {
        //        sh "${bob} trivy-inline-scan:create-dir"
        //    }
        //}
        //stage ('Trivy Scan') {
        //    steps {
        //        parallel(
        //                "scan-base": {
        //                    sh "${bob} trivy-inline-scan:scan-base"
        //                },
        //                "scan-neo4j": {
        //                    sh "${bob} trivy-inline-scan:scan-neo4j"
        //                },
        //                "scan-neo4j-populator": {
        //                    sh "${bob} trivy-inline-scan:scan-neo4j-populator"
        //                },
        //                "scan-neo4j-load-profiles": {
        //                    sh "${bob} trivy-inline-scan:scan-neo4j-load-profiles"
        //                },
        //                "scan-metric-load-generator": {
        //                    sh "${bob} trivy-inline-scan:scan-metric-load-generator"
        //                },
        //                "scan-load-control-client": {
        //                    sh "${bob} trivy-inline-scan:scan-load-control-client"
        //                },
        //                "scan-load-control-service": {
        //                    sh "${bob} trivy-inline-scan:scan-load-control-service"
        //                }
        //        )
        //    }
        //}
        //stage('Anchore/Grype Scan') {
        //    steps {
        //        parallel(
        //                "grype-scan-base": {
        //                    sh "${bob} grype-scan:grype-scan-base"
        //                },
        //                "grype-scan-neo4j": {
        //                    sh "${bob} grype-scan:grype-scan-neo4j"
        //                },
        //                "grype-scan-neo4j-populator": {
        //                    sh "${bob} grype-scan:grype-scan-neo4j-populator"
        //                },
        //                "grype-scan-neo4j-load-profiles": {
        //                    sh "${bob} grype-scan:grype-scan-neo4j-load-profiles"
        //                },
        //                "grype-scan-metric-load-generator": {
        //                    sh "${bob} grype-scan:grype-scan-metric-load-generator"
        //                },
        //                "grype-scan-load-control-client": {
        //                    sh "${bob} grype-scan:grype-scan-load-control-client"
        //                },
        //                "grype-scan-load-control-service": {
        //                    sh "${bob} grype-scan:grype-scan-load-control-service"
        //                }
        //        )
        //    }
        //}
        //stage('Hadolint Scan') {
        //    steps {
        //        sh "${bob} hadolint-scan"
        //    }
        //}

        stage('Kubeaudit Scan') {
            steps {
                sh "${bob} kubeaudit-scan"
            }
        }

        //stage('Kubesec Scan') {
        //    steps {
        //        sh "${bob} kubesec-scan"
        //    }
        //}

        //stage('XRay Scan') {
        //    steps {
        //        sh "${bob} fetch-xray-report"
        //    }
        //}
        //stage('Generate VA Report') {
        //    steps {
        //        sh "${bob} generate-VA-report-V2"
        //    }
        //}
        // ******************************************************************************** //
    }
    post {
        failure {
            sh '''
                set +x
             '''
        }
        always {
            script {
                currentBuild.displayName = "#${BUILD_NUMBER} - Full"
            }
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false
    def rulesetFile = 'ruleset2.0.yaml'

    String toString() {
        def env = envVars
                .collect({ entry -> "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /home/enmadm100/doc_push/group:/etc/group:ro
            |-v /home/enmadm100/doc_push/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |--group-add \$(stat -c '%g' /var/run/docker.sock)
            |${bobImage}
            |-r ${rulesetFile}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
